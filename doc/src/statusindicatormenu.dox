/*! \page statusindicatormenu Status Indicator Menu

This page documents various aspects about the Status Indicator Menu.

The status indicator menu loads a predefined set of plugins as described in
Direct UI â€“ Status Indicator System UI Specification (H00405111-EN). The
plugins are displayed on top of each other and loaded from
/usr/lib/meegotouch/statusindicatormenuplugins in the following order:

<table>
<tr>
<th>Order</th>
<th>Plugin</th>
<th>Shared library file name</th>
</tr>
<tr>
<td>1</td>
<td>Profile setting</td>
<td>libprofile.so</td>
</tr> 
<tr>
<td>2</td>
<td>Date & Time</td>
<td>libdatetime.so</td>
</tr>
<tr>
<td>3</td>
<td>Clock alarm</td>
<td>libclockalarm.so</td>
</tr>
<tr>
<td>4</td>
<td>Connectivity (Offline mode, Internet connection, Bluetooth, Positioning and Phone network)</td>
<td>libconnectivity.so</td>
</tr>
<tr>
<td>5</td>
<td>My presence</td>
<td>libpresence.so</td>
</tr>
<tr>
<td>6</td>
<td>Volume control</td>
<td>libvolume.so</td>
</tr>
<tr>
<td>7</td>
<td>Energy (battery)</td>
<td>libbattery.so</td>
</tr>
<tr>
<td>8</td>
<td>Accessories</td>
<td>libaccessories.so</td>
</tr>
</table>

Each plugin is written as a shared library that contains a class that
is exported as a Qt plugin as follows:

<pre>
class MyPluginClass : public QObject, public MStatusIndicatorMenuPluginInterface
{
    Q_OBJECT
    Q_INTERFACES(MStatusIndicatorMenuPluginInterface)

public:
    virtual MWidget *constructWidget(MStatusIndicatorMenuInterface &statusIndicatorMenu);
};

Q_EXPORT_PLUGIN2(mypluginname, MyPluginClass)

MWidget* MyPluginClass::constructWidget(MStatusIndicatorMenuInterface &statusIndicatorMenu)
{
    return new MyPluginWidget(statusIndicatorMenu);
}
</pre>

The class should implement MStatusIndicatorMenuPluginInterface which only
contains one function, constructWidget(MStatusIndicatorMenuInterface &),
which should return a pointer to a MWidget for the plugin. This MWidget
is then inserted into the status indicator menu layout by the status indicator
menu. The parameter to constructWidget() is an interface to the status
indicator menu which allows the plugin to show the main application page of
the status indicator menu and to hide the status indicator menu. 

To display a subpage the plugin widget should create a new MApplicationPage
and make it appear() when necessary. The plugin widget should then call the
given MStatusIndicatorMenuInterface's showStatusIndicatorMenu() to return
back to the status indicator menu main view.

Plugins register their views using the DUI view registration macros.
The plugins load their CSS files (if any) using MTheme::loadCSS().
The preferred location for the CSS files is
/usr/share/themes/base/meegotouch/system-ui/style and the suggested CSS
file name is the same as the shared library name without the lib prefix and
the .so postfix. 

Here's an example implementation of the profile plugin.

profileplugin.h

<pre>
#include <MStatusIndicatorMenuPluginInterface>
#include <QObject>

class ProfilePlugin : public QObject, public MStatusIndicatorMenuPluginInterface
{
    Q_OBJECT
    Q_INTERFACES(MStatusIndicatorMenuPluginInterface)

public:
    virtual MWidget *constructWidget(MStatusIndicatorMenuInterface &statusIndicatorMenu);
};
</pre>

profileplugin.cpp

<pre>
#include "profileplugin.h"
#include "profile.h"

Q_EXPORT_PLUGIN2(profile, ProfilePlugin)

MWidget* ProfilePlugin::constructWidget(MStatusIndicatorMenuInterface &statusIndicatorMenu)
{
    return new Profile(statusIndicatorMenu);
}
</pre>

profile.h

<pre>
#include <MWidget>

class MStatusIndicatorMenuInterface;
class MApplicationPage;
class MButton;

// The Profile widget makes it possible to select the currently active profile.
class Profile : public MWidget
{
    Q_OBJECT

public:
    Profile(MStatusIndicatorMenuInterface &statusIndicatorMenu, QGraphicsItem *parent = NULL);
    virtual ~Profile();

private slots:
    // A slot for receiving information about button clicks.
    void buttonClicked();
    // A slot for receiving information about button clicks.
    void buttonClicked(MButton *button);

private:
    // Interface for controlling the status indicator menu
    MStatusIndicatorMenuInterface &statusIndicatorMenu;
    // Application page for the profile modification
    MApplicationPage *profileModificationPage;
};
</pre>

profile.cpp

<pre>
#include "profile.h"
#include <MStatusIndicatorMenuPluginInterface>
#include <MButton>
#include <MButtonGroup>
#include <MContainer>
#include <MApplicationPage>
#include <QGraphicsLinearLayout>

Profile::Profile(QGraphicsItem *parent) :
    MWidget(parent),
    statusIndicatorMenu(statusIndicatorMenu),
    profileModificationPage(new MApplicationPage)
{
    QGraphicsLinearLayout *mainLayout = new QGraphicsLinearLayout(Qt::Vertical);
    setLayout(mainLayout);
    mainLayout->setContentsMargins(0, 0, 0, 0);

    // Create a container for the profiles
    MContainer *container = new MContainer;
    MWidget *widget = new MWidget;
    QGraphicsLinearLayout *layout = new QGraphicsLinearLayout(Qt::Horizontal);
    layout->setContentsMargins(0, 0, 0, 0);
    widget->setLayout(layout);
    container->setTitle("Profiles");
    container->setCentralWidget(widget);
    connect(container, SIGNAL(headerClicked()), this, SLOT(showProfileModificationPage()));
    mainLayout->addItem(container);

    // Create a button group for the profiles
    MButtonGroup *buttonGroup = new MButtonGroup(widget);
    buttonGroup->connect(buttonGroup, SIGNAL(buttonClicked(MButton *)), this, SLOT(buttonClicked(MButton *)));

    // Place the buttons in the button group and in the layout
    MButton *button;
    button = new MButton("Ringing");
    button->setCheckable(true);
    button->setChecked(true);
    layout->addItem(button);
    buttonGroup->addButton(button);
    button = new MButton("Silent");
    button->setCheckable(true);
    layout->addItem(button);
    buttonGroup->addButton(button);
    button = new MButton("Beep");
    button->setCheckable(true);
    layout->addItem(button);
    buttonGroup->addButton(button);
    button = new MButton("Loud");
    button->setCheckable(true);
    layout->addItem(button);
    buttonGroup->addButton(button);

    // Set up the profile modification page
    profileModificationPage->setTitle("Profile");
    profileModificationPage->setEscapeButtonMode(MEscapeButtonPanelModel::BackMode);
    connect(profileModificationPage, SIGNAL(backButtonClicked()), this, SLOT(buttonClicked()));
}

Profile::~Profile()
{
    delete profileModificationPage;
}

void Profile::showProfileModificationPage()
{
    profileModificationPage->appear();
}

void Profile::buttonClicked()
{
    statusIndicatorMenu.showStatusIndicatorMenu();
}

void Profile::buttonClicked(MButton *)
{
    statusIndicatorMenu.hideStatusIndicatorMenu();
}
</pre>
 
*/
